diff --git a/plugins/operation_types/action.class.php b/plugins/operation_types/action.class.php
index f3e60a3..e9e1dfc 100644
--- a/plugins/operation_types/action.class.php
+++ b/plugins/operation_types/action.class.php
@@ -19,16 +19,12 @@ class ViewsBulkOperationsAction extends ViewsBulkOperationsBaseOperation {
    * Returns the access bitmask for the operation, used for entity access checks.
    */
   public function getAccessMask() {
-    // Assume edit by default.
-    if (empty($this->operationInfo['behavior'])) {
-      $this->operationInfo['behavior'] = array('changes_property');
-    }
-
     $mask = 0;
     if (in_array('views_property', $this->operationInfo['behavior'])) {
       $mask |= VBO_ACCESS_OP_VIEW;
     }
-    if (in_array('changes_property', $this->operationInfo['behavior'])) {
+    // Assume edit by default.
+    if (empty($this->operationInfo['behavior']) || in_array('changes_property', $this->operationInfo['behavior'])) {
       $mask |= VBO_ACCESS_OP_UPDATE;
     }
     if (in_array('creates_property', $this->operationInfo['behavior'])) {
diff --git a/plugins/operation_types/action.inc b/plugins/operation_types/action.inc
index 2cdd6a1..c05d0cb 100644
--- a/plugins/operation_types/action.inc
+++ b/plugins/operation_types/action.inc
@@ -63,6 +63,9 @@ function views_bulk_operations_operation_action_list($operation_id = NULL) {
         'behavior' => isset($action['behavior']) ? $action['behavior'] : array(),
         'permissions' => isset($action['permissions']) ? $action['permissions'] : NULL,
         'pass rows' => !empty($action['pass rows']),
+        'entity operations' => !empty($action['entity operations']) ? $action['entity operations'] : array(),
+        'access callback' => isset($action['access callback']) ? $action['access callback'] : NULL,
+        'access arguments' => !empty($action['access arguments']) ? $action['access arguments'] : array(),
       );
     }
   }
diff --git a/plugins/operation_types/base.class.php b/plugins/operation_types/base.class.php
index 968921f..7f26cc1 100644
--- a/plugins/operation_types/base.class.php
+++ b/plugins/operation_types/base.class.php
@@ -128,6 +128,59 @@ abstract class ViewsBulkOperationsBaseOperation {
   }
 
   /**
+   * Checks the account's permission to execute the operation on the entity.
+   *
+   * This method checks whether the specified account has the necessary
+   * permission to perform the requested operation on the specified entity, and
+   * returns the results of the check.
+   *
+   * @param string $entity_type
+   *   The type of the entity permission is being checked on.
+   * @param object $entity
+   *   The entity permission is being checked on.
+   * @param object $account
+   *   The user account the permission is being checked for.
+   *
+   * @return bool
+   *   Returns TRUE, if the account has permission to perform the requested
+   *   operation on the speficied entity, or FALSE, if it does not.
+   */
+  public function entity_access($entity_type, $entity, $account = NULL) {
+    // If the action has specified an access callback, call it.
+    if (isset($this->operationInfo['access callback'])) {
+      $callback = $this->operationInfo['access callback'];
+      // Check for a TRUE or FALSE value.
+      if (is_bool($callback)) {
+        return $callback;
+      }
+
+      // The first three arguments sent to the callback are $entity_type,
+      // $entity, and $account. Other arguments are tacked on after that.
+      return call_user_func_array($callback, array_merge(array($entity_type, $entity, $account), $this->operationInfo['access arguments']));
+    }
+
+    // If the action has specified which operations are being executed against
+    // this entity, then check those specifically against entity_access. This
+    // is offered as a convenience to avoid having to write a custom access
+    // callback for many common use-cases.
+    if (!empty($this->operationInfo['entity operations'])) {
+      $allowed_entity_operations = TRUE;
+      foreach ($this->operationInfo['entity operations'] as $op) {
+        if (!entity_access($op, $entity_type, $entity, $account)) {
+          $allowed_entity_operations = FALSE;
+          break;
+        }
+      }
+
+      return $allowed_entity_operations;
+    }
+
+    // Legacy fallback: if neither 'access callback' nor 'entity operations' is
+    // set, then access will be derived from getAccessMask().
+    return _views_bulk_operations_entity_access($this, $entity_type, $entity, $account);
+  }
+
+  /**
    * Returns the configuration form for the operation.
    * Only called if the operation is declared as configurable.
    *
diff --git a/views_bulk_operations.module b/views_bulk_operations.module
index f5865a2..aa0e93f 100644
--- a/views_bulk_operations.module
+++ b/views_bulk_operations.module
@@ -1088,7 +1088,7 @@ function views_bulk_operations_queue_item_process($queue_item_data, &$log = NULL
 
     // If the current entity can't be accessed, skip it and log a notice.
     $skip_permission_check = $operation->getAdminOption('skip_permission_check');
-    if (!$skip_permission_check && !_views_bulk_operations_entity_access($operation, $entity_type, $entity, $account)) {
+    if (!$skip_permission_check && !$operation->entity_access($entity_type, $entity, $account)) {
       $message = 'Skipped %operation on @type %title due to insufficient permissions.';
       $arguments = array(
         '%operation' => $operation->label(),
@@ -1186,7 +1186,7 @@ function views_bulk_operations_direct_process($operation, $rows, $options) {
     $skip_permission_check = $operation->getAdminOption('skip_permission_check');
     // Filter out entities that can't be accessed.
     foreach ($entities as $id => $entity) {
-      if (!$skip_permission_check && !_views_bulk_operations_entity_access($operation, $entity_type, $entity, $user)) {
+      if (!$skip_permission_check && !$operation->entity_access($entity_type, $entity)) {
         $context['results']['log'][] = t('Skipped %operation on @type %title due to insufficient permissions.', array(
           '%operation' => $operation->label(),
           '@type' => $entity_type,
