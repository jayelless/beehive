<?php

/**
 * @file
 * Install, uninstall, and update hooks for the membership_entity_term module.
 */

/**
 * Implements hook_schema().
 */
function membership_entity_term_schema() {
  $schema['membership_entity_term'] = array(
    'description' => 'The base table for membership terms.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for membership terms.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'mid' => array(
        'description' => 'The membership identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => 'Integer code indicating the membership term status.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'term' => array(
        'description' => 'The human readable term length. eg. 1 year.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'modifiers' => array(
        'description' => 'A serialized list of term length modifiers. eg. +1 month.',
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
        'serialize' => TRUE,
      ),
      'start' => array(
        'description' => 'The UNIX timestamp when this term starts.',
        'type' => 'datetime',
        'mysql_type' => 'datetime',
        'pgsql_type' => 'timestamp without time zone',
        'sqlite_type' => 'varchar',
        'sqlsrv_type' => 'smalldatetime',
        'not null' => TRUE,
        'sortable' => TRUE,
      ),
      'end' => array(
        'description' => 'The UNIX timestamp when this term ends.',
        'type' => 'datetime',
        'mysql_type' => 'datetime',
        'pgsql_type' => 'timestamp without time zone',
        'sqlite_type' => 'varchar',
        'sqlsrv_type' => 'smalldatetime',
        // Null value for lifetime terms.
        'not null' => FALSE,
        'sortable' => TRUE,
      ),
    ),
    'indexes' => array(
      'membership_entity_term_membership' => array('mid'),
      'membership_entity_term_start' => array('mid', 'start'),
      'membership_entity_term_end' => array('mid', 'end'),
    ),
    'primary key' => array('id'),
    'foreign keys' => array(
      'membership_entity_term_membership' => array(
        'table' => 'membership_entity',
        'columns' => array('mid' => 'mid'),
      ),
    ),
  );

  return $schema;
}

/**
 * Adds a status field.
 */
function membership_entity_term_update_7000() {
  $field = array(
    'description' => 'Integer code indicating the membership term status.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 1,
  );
  db_add_field('membership_entity_term', 'status', $field);

  // Default to active. Cron will expire any old terms.
  db_update('membership_entity_term')
    ->fields(array('status' => MEMBERSHIP_ENTITY_ACTIVE))
    ->execute();
}

/**
 * Adds option to display/hide fields on the renew form.
 */
function membership_entity_term_update_7001() {
  // Show on renew form options defaults to join form option.
  $types = module_exists('membership_entity_type') ? array_keys(membership_entity_type_get_types()) : array('membership');
  foreach ($types as $type) {
    foreach (field_info_instances('membership_entity', $type) as $field_name => $instance) {
      if (!empty($instance['settings']['membership_entity_join_form'])) {
        $instance['settings']['membership_entity_term_renew_form'] = TRUE;
        field_update_instance($instance);
      }
    }
  }
}
