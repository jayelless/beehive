<?php
/**
 * Use a hook exposed in the membership_entity_term module to recalculate the end date of the membership
 * @param  dateObject &$end  The original End date for membership
 * @param  membership_term_entity  &$term  The term entity
 * @return dateObject  The amended end date.
 */
function beekeeper_custom_membership_entity_term_end_date_alter(&$end, &$term){
  // Temp - if this is a dummy membership (type = "membership")
  // then make the end date 31 May this year
  if ($term->membership_entity_type == 'membership') {
    $end = new DateObject(strtotime("31 May this year"), new DateTimezone($term->timezone));
  }
  else {
    $end = new DateObject(strtotime("31 May next year"), new DateTimezone($term->timezone));
  }
}

/**
 * Use a hook exposed in the membership_entity_term module to recalculate the start date of the membership
 * @param  dateObject &$start  The original Start date for membership
 * @param  membership_term_entity  &$term  The term entity
 * @return dateObject  The amended start date.
 */
function beekeeper_custom_membership_entity_term_start_date_alter(&$start, &$term){
  // Temp - if this is a dummy membership (type = "membership")
  // then make the start date 30 May this year
  if ($term->membership_entity_type == 'membership') {
    $start = new DateObject(strtotime("30 May this year"), new DateTimezone($term->timezone));
  }
}

/**
 * Implements hook_entity_presave
 */
function beekeeper_custom_entity_presave($entity, $type) {
  switch ($type) {
    case 'membership_entity':
      if ($entity->type == 'membership') {
        // This is a dummy membership, so convert it to an expired standard membership
        $entity->type = 'standard_membership';
        $entity->status = 0;
      }
      break;
    case 'membership_entity_term':
      if ($entity->membership_entity_type == 'membership') {
        // This is a dummy membership, so convert it to an expired standard membership
        $entity->membership_entity_type = 'standard_membership';
        $entity->status = 0;
      }
      break;
  }
}


/**
 * Function to massage imported data to ensure that the address elements are correct
 *
 * Implements hook_feeds_presave
 */
function beekeeper_custom_feeds_presave($source, $entity, $item) {
  // Put the address data into the correct field elements
  $entity->field_postal_address = array(
    LANGUAGE_NONE => array(
      0 => array(
        'country' => $item['country'],
        'administrative_area' => '',
        'sub_administrative_area' => '',
        'locality' => $item['town_city'],
        'dependent_locality' => $item['suburb'],
        'postal_code' => $item['postcode'],
        'thoroughfare' => $item['address_line1'],
        'premise' => $item['address_line2'],
        'sub_premise' => '',
        'organisation_name' => '',
        'name_line' => $item['name_first'] . ' ' . $item['surname'],
        'name_first' => $item['name_first'],
        'name_last' => $item['surname'],
        'data' => '',
      )
    )
  );

  // Split the telephone number field on multiple phone numbers
  $phone_number = $entity->field_phone_number[LANGUAGE_NONE][0]['value'];
  $phone_numbers = explode(';', $phone_number);
  $entity->field_phone_number[LANGUAGE_NONE] = array();
  foreach ($phone_numbers as $phone_number) {
    $entity->field_phone_number[LANGUAGE_NONE][] = array('value' => trim($phone_number));
  }
}

/**
 * Implements hook_block
 */
function beekeeper_custom_block_info() {
  $blocks['curruser'] = array(
    'info' => t('Current user'),
    'cache' => DRUPAL_CACHE_PER_USER,
  );
  $blocks['ruleoff'] = array(
    'info' => t('Rule off'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}


/**
 * Implements hook_block_view
 */
function beekeeper_custom_block_view($delta = '') {
  $subject = NULL;
  switch ($delta) {
    case 'curruser':
      global $user;
      $content = '<span class="beekeeper-username">';
      if ($user->uid) {
        $content .= $user->name . '</span>&nbsp;&nbsp<a href="/user/logout">(logout)</a>';
      }
      else {
        $content .= 'anonymous</span>&nbsp;&nbsp<a href="/user/login">(login)</a>';
      }
      break;
    case 'ruleoff':
      $content = '<div class="beekeeper-rule-off"></div>';
      break;
    default:
      $content = '';
  }
  // Return array holding block information
  return array(
    'subject' => $subject,
    'content' => array('#markup' => $content),
  );
}


/**
 * Implements hook_form_FORM_ID_alter
 *
 * Add the user's postal address as the default address in the billing pane
 */
function beekeeper_custom_form_commerce_checkout_form_checkout_alter(&$form, &$form_state) {
  $account = user_load_by_mail($form['account']['login']['mail']['#default_value']);
  if (isset($account->field_postal_address) && !empty($account->field_postal_address)) {
    // Loop thru user address values and add them as default values
    $langcode = NULL;
    $langcode = is_null($langcode) ? LANGUAGE_NONE : $langcode;
    foreach ($account->field_postal_address[$langcode][0] as $key => $value) {
      if (isset($form['customer_profile_billing']['commerce_customer_address'][$langcode][0]['#address'][$key])) {
        $form['customer_profile_billing']['commerce_customer_address'][$langcode][0]['#address'][$key] = $value;
      }
    }
  }
}

/**
 * Implements hook_user_presave
 *
 * Copies the user's name to the name compontnents of the postal address
 */
function beekeeper_custom_user_presave(&$edit, $account, $category) {
  $langcode = NULL;
  $langcode = is_null($langcode) ? LANGUAGE_NONE : $langcode;
  if ($edit & isset($edit['field_postal_address'])) {
    // Copy the name fields to the postal address
    $first_name = isset($edit['field_name_first']) ? $edit['field_name_first'][$langcode][0]['value'] : 'login:';
    $last_name = isset($edit['field_name_last']) ? $edit['field_name_last'][$langcode][0]['value'] : $account->name;
    $edit['field_postal_address'][$langcode][0]['name_line'] = $first_name . ' ' . $last_name;
    $edit['field_postal_address'][$langcode][0]['first_name'] = $first_name;
    $edit['field_postal_address'][$langcode][0]['last_name'] = $last_name;
  }
}

/**
 * Implements hook_mail_alter
 * to stop mail from being sent in development and test environments
 */
function beekeeper_custom_mail_alter(&$message) {
  // We don't want to send emails if the variable has not been set, or if it has been set and is TRUE.
  // We can use variable_get() to get the $conf variable set in our settings.php file
  // Note that by setting the default to TRUE, the default setting for the system is to be
  // a development environment. Set this to FALSE to have the default be a live environment.
  if(variable_get('development_environment', TRUE)) {
    // Log the mail so it can be debugged if necessary
    watchdog('beekeeper', 'The following email was not sent: !message',
      array('!message' => '<pre>' . print_r($message, TRUE) . '</pre>'));
    // Prevent the mail from being sent
    $message['send'] = FALSE;
    // leave a message for the user
    drupal_set_message(t('Mail message NOT sent to @to', array('@to'=>$message['to'])));
  }
}

/**
 * Function to return a keyed list of membership types
 */
function beekeeper_custom_membership_type_list() {
  return db_query('SELECT id, type FROM {membership_entity_type} ORDER BY id')->fetchAllKeyed();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function beekeeper_custom_form_system_theme_settings_alter(&$form, &$form_state, $form_id) {
  $themes_list = list_themes(TRUE);

  // Filter down to just the commons_beehive theme:
  // If commons_beehive theme exists
  // If commons_beehive is enabled
  // If we're not on the general settings tab -- because args aren't set yet
  // And we're on the commons_origin settings page, then show the color palette
  if (isset($themes_list['commons_beehive'])
    && $themes_list['commons_beehive']->status == 1
    && !empty($form_state['build_info']['args'])
    && $form_state['build_info']['args'][0] == 'commons_beehive') {
    // Add the color palette selection form to the apperance settings form.
    require_once(drupal_get_path('theme', 'commons_beehive') . '/commons_beehive.palettes.inc');
    commons_beehive_palettes_form($form);
  }
}

/**
 * Implelemnts hook_block_view_MODULE_DELTA_alter()
 */
function beekeeper_custom_block_view_commons_site_homepage_commons_site_homepage_alter(&$data) {

  foreach ($data['content']['#links'] as &$link) {
    if ($link['title'] == t('Sign up')) {
      $link['href'] = 'user/join';
    }
  }
}

/**
 * Implements hook_menu()
 */
function beekeeper_custom_menu() {
  $menu_items = array();
  $menu_items['beekeeper/membership/join'] = array(
    'title' => 'Join club',
    'description' => 'Join the Wellington Beekeepers Association',
    'access callback' => 'beekeeper_custom_accesscheck',
    'access arguments' => array('membership-join'),
    'page callback' => 'beekeeper_custom_menu_join_club',
    'page arguments' => '',
    'file' => 'beekeeper_custom.menu.inc',
    'menu_name' => 'beekeeper-menu',
    'weight' => 10,
  );
  $menu_items['beekeeper/membership/renew'] = array(
    'title' => 'Renew membership',
    'description' => 'Renew membership of the Wellington Beekeepers Association',
    'access callback' => 'beekeeper_custom_accesscheck',
    'access arguments' => array('membership-renew'),
    'page callback' => 'beekeeper_custom_menu_renew_membership',
    'page arguments' => '',
    'file' => 'beekeeper_custom.menu.inc',
    'menu_name' => 'beekeeper-menu',
    'weight' => 11,
  );

  return $menu_items;
}

/**
 * Custom access callback function
 */
function beekeeper_custom_accesscheck($code, $type = NULL) {
  global $user;
  if ($user->uid == 1) { return TRUE; }

  // Show the "Join" menu item
  if ($code == 'membership-join') {
    if (empty($user->uid)) {
      return TRUE;
    }
    if (!db_query('SELECT mid FROM {membership_entity} WHERE uid = :uid', array(':uid' => $user->uid))->rowCount()) {
      return TRUE;
    }
    return FALSE;
  }

  // Show the "Renew membership" menu item
  if ($code == 'membership-renew') {
    // Check if the user has a renewable membership and date is after 31 May
    $month_day = date('md');
    $membership_type = $type ? array($type) : array('standard_membership','junior_membership');
    if ($user->uid) {
      $sql = 'SELECT mid FROM {membership_entity} WHERE uid = :uid AND type IN (:type) ORDER BY mid DESC LIMIT 1';
      $mid = db_query($sql, array(':uid' => $user->uid, ':type' => $membership_type))->fetchField();
      if ($mid) {
        $sql = 'SELECT status FROM {membership_entity_term} WHERE mid = :mid ORDER BY id DESC LIMIT 1';
        $status = db_query($sql, array(':mid' => $mid))->fetchField();
        if ($status == 0 || $month_day >= variable_get('beekeeper-membership-renewal-open','0531')) {
          return TRUE;
        }
      }
    }
    return FALSE;
  }

}

/**
 * Implements hook_menu_alter()
 */
function beekeeper_custom_menu_alter(&$menu_items) {
  // apiaries and orders come from views so are pre-set
  foreach ($menu_items as $key => &$item) {
    // Main menu
    if ($key == 'events') { $item['weight'] = 1; }
    if ($key == 'user-guides') { $item['weight'] = 2; }
    // User account tabs
    if ($key == 'user/%user/edit') { $item['weight'] = 1; }
    if ($key == 'user/%user/edit-profile') { $item['weight'] = 2; }
    if ($key == 'user/%/apiaries') { $item['weight'] = 5; }
    if ($key == 'user/%/messages') { $item['weight'] = 6; }
    if ($key == 'user/%user/notifications') { $item['weight'] = 7; }
    if ($key == 'user/%user/contacts') { $item['weight'] = 8; }
    if ($key == 'user/%/orders') { $item['weight'] = 15; }
    if ($key == 'user/%user/addressbook') { $item['weight'] = 16; }
    if ($key == 'user/%user/shortcuts') { $item['weight'] = 17; }
    if ($key == 'user/%user/notification-settings') { $item['weight'] = 18; }
    if ($key == 'user/%user/devel') { $item['weight'] = 19; }
  }
}

/**
 * Implements hook_membership_entity_access().
 */
function beekeeper_custom_membership_entity_access($op, $membership = NULL, $account = NULL) {
  // Deny access to the membership renew tab until the agreed date.
  if ($op == 'renew') {
    if (!beekeeper_custom_accesscheck('membership-renew')) {
      return FALSE;
    }
  }
  return NULL;
}

/**
 * Implements hook_cron()
 */
function beekeeper_custom_cron() {

  // Test if mlmmj is available
  if (file_exists('/usr/bin/mlmmj-list') && $result = exec('/usr/bin/mlmmj-list -V')) {
    // Go through the registered users and update the mlmmj mail lists
    $rids = db_query('SELECT name, rid from {role}', array())->fetchAllKeyed();
    // TODO - get the role names from a configuration variable
    $member_rids = array($rids['Standard member'], $rids['Junior member'], $rids['Lifetime member']);
    $committee_rids = array($rids['Committee member']);

    // Update the members mailing list
    $sql = 'Select LOWER(u.mail) from {users} u LEFT JOIN {users_roles} r on r.uid = u.uid ';
    $sql .= 'LEFT JOIN {field_data_field_members_maillist} m ON m.entity_id = u.uid ';
    $sql .= 'WHERE r.rid in (:roles) AND m.field_members_maillist_value = :yes';

    $members = db_query($sql, array(':roles' => $member_rids, ':yes' => 1))->fetchCol();
    sort($members);

    // Get a list of members currently subscribed to the mlmmj list
    $mlmmj_members_list = variable_get('mlmmj-members-list', '/var/spool/mlmmj/beehive.org.nz/members');
    $mlmmj_committee_list = variable_get('mlmmj-committee-list', '/var/spool/mlmmj/beehive.org.nz/committee');
    $command = '/usr/bin/mlmmj-list -L '. $mlmmj_members_list;
    $subscribers = array();
    $result = NULL;
    exec($command, $subscribers, $result);
    if ($result === 0) {
      sort($subscribers);
      // Compare the list of subscribers with the list of members
      $new_subscribers = array_diff($members, $subscribers);
      $old_subscribers = array_diff($subscribers, $members);

      if ($new_subscribers) {
        watchdog('beekeeper', 'Members - New subscribers: @new', array('@new' => print_r($new_subscribers, TRUE)), WATCHDOG_INFO);

        foreach ($new_subscribers as $tosubscribe) {
          $command = '/usr/bin/mlmmj-sub -L ' . $mlmmj_members_list . ' -qs -a ' . $tosubscribe;
          $output = array();
          $result = NULL;
          exec($command, $output, $result);
          if ($result !== 0) {
            watchdog('beekeeper','Error subscribing address %adr to members list (Result=@res, @out)',
              array('%adr' => $tosubscribe, '@res'=>$result, '@out'=>print_r($output, TRUE)), WATCHDOG_WARNING);
          }
        }

      }

      if ($old_subscribers) {
        watchdog('beekeeper', 'Members - Old subscribers: @old', array('@old' => print_r($old_subscribers, TRUE)), WATCHDOG_INFO);

        foreach ($old_subscribers as $unsubscribed) {
          $command = '/usr/bin/mlmmj-unsub -L ' . $mlmmj_members_list . ' -qs -a ' . $unsubscribed;
          $output = array();
          $result = NULL;
          exec($command, $output, $result);
          if ($result !== 0) {
            watchdog('beekeeper','Error unsubscribing address %adr to members list (Result=@res, @out)',
              array('%adr' => $unsubscribed, '@res'=>$result, '@out'=>print_r($output, TRUE)), WATCHDOG_WARNING);
          }
        }

      }

    }

    // Update the committee mailing list
    $sql = 'Select LOWER(u.mail) from {users} u LEFT JOIN {users_roles} r on r.uid = u.uid ';
    $sql .= 'WHERE r.rid in (:roles)';

    $members = db_query($sql, array(':roles' => $committee_rids))->fetchCol();
    sort($members);

    // Get a list of members currently subscribed to the mlmmj list
    $command = '/usr/bin/mlmmj-list -L ' . $mlmmj_committee_list;
    $subscribers = array();
    $result = NULL;
    exec($command, $subscribers, $result);
    if ($result === 0) {
      sort($subscribers);
      // Compare the list of subscribers with the list of members
      $new_subscribers = array_diff($members, $subscribers);
      $old_subscribers = array_diff($subscribers, $members);

      if ($new_subscribers) {
        watchdog('beekeeper', 'Committee - New subscribers: @new', array('@new' => print_r($new_subscribers, TRUE)), WATCHDOG_INFO);

        foreach ($new_subscribers as $tosubscribe) {
          $command = '/usr/bin/mlmmj-sub -L ' . $mlmmj_committee_list . ' -qs -a ' . $tosubscribe;
          $output = array();
          $result = NULL;
          exec($command, $output, $result);
          if ($result !== 0) {
            watchdog('beekeeper','Error subscribing address %adr to committee list (Result=@res, @out)',
              array('%adr' => $tosubscribe, '@res'=>$result, '@out'=>print_r($output, TRUE)), WATCHDOG_WARNING);
          }
        }

      }

      if ($old_subscribers) {
        watchdog('beekeeper', 'Committee - Old subscribers: @old', array('@old' => print_r($old_subscribers, TRUE)), WATCHDOG_INFO);

        foreach ($old_subscribers as $unsubscribed) {
          $command = '/usr/bin/mlmmj-unsub -L ' . $mlmmj_committee_list . ' -qs -a ' . $unsubscribed;
          $output = array();
          $result = NULL;
          exec($command, $output, $result);
          if ($result !== 0) {
            watchdog('beekeeper','Error unsubscribing address %adr to committee list (Result=@res, @out)',
              array('%adr' => $unsubscribed, '@res'=>$result, '@out'=>print_r($output, TRUE)), WATCHDOG_WARNING);
          }
        }

      }

    }

  }


}

/**
 * Implements hook_commons_utility_links().
 */
function beekeeper_custom_commons_utility_links() {
  $links = array();
  if (user_is_logged_in()) {
    global $user;
    $sql = 'SELECT mid,type FROM {membership_entity} WHERE uid = :uid ORDER BY mid DESC LIMIT 1';
    $result = db_query($sql, array(':uid' => $user->uid))->fetchAllKeyed();
    if ($result) {
      // Use the latest membership available
      $mid = reset(array_keys($result));
      if ($mid) {
        $links['membership'] = array(
          'href' => 'membership/' . $mid,
          'title' => t('Membership'),
          'weight' => -9,
        );
      }
    }
  }
  return $links;

}

/**
 * Implements hook_commons_utility_links_alter().
 */
function beekeeper_custom_commons_utility_links_alter(&$links) {
  // Alter the join link if present
  if (isset($links['signup'])) {
    $links['signup']['href'] = 'user/join';
  }

}
